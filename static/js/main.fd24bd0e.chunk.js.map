{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","scroll","style","overflow","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","Scroll","components_ErrorBoundry","components_CardList","React","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd24bd0e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card =(props)=>{\r\n\treturn(\r\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw shadow-5'>\r\n\t\t\t     <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n\t\t\t       <div>\r\n\t\t\t          <h2> {props.name}</h2>\r\n\t\t\t           <p> {props.email} </p>\r\n\t\t\t        </div>\r\n\t\t\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n\t/*if(true){\r\n\t\tthrow new Error('NOOOOOOOOOOOOOOOO');\r\n\t}*/\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t    {\r\n\t\t\t    \trobots.map((user,i)=>{\r\n\t\t              return (\r\n\t\t              \t<Card \r\n\t\t\t\t\t          key={i} \r\n\t\t\t\t\t          id={robots[i].id}\r\n\t\t\t\t\t           name={robots[i].name}\r\n\t\t\t\t\t           email={robots[i].email}\r\n\t\t\t\t\t    />\r\n\t\t               );\r\n\t                })\r\n\t\t\t    }\r\n    \t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;\r\n/*const CardList = ({robots}) => {\r\n\tconst cardComponent = robots.map((user,i)=>{\r\n\t\treturn (<Card \r\n\t\t          key={i} \r\n\t\t          id={robots[i].id}\r\n\t\t           name={robots[i].name}\r\n\t\t           email={robots[i].email}/>\r\n\t\t           );\r\n\t})\r\n\treturn(\r\n\t\t\t<>\r\n\t\t\t  \t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n\t\t\t  \t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n\t\t\t    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n\t\t\t    {cardComponent}\r\n    \t\t</>\r\n\t\t);\r\n}*/\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input \r\n\t\t\t\t    className =' pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t\ttype ='search'\r\n\t\t\t\t\t placeholder ='search robots'\r\n\t\t\t\t\t onChange={searchChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst scroll=(props)=>{\r\n\treturn (\r\n\t\t\t<div style={{overflow: 'scroll', border: '1px solid black', height: '1000px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default scroll;","import React ,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn<h1> Ooops. That is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n//import { robots } from '../components/robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from'../components/ErrorBoundry';\r\n\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t     /*robots : robots,*/\r\n\t     robots : [],\r\n\t     searchfield : ''\r\n     }\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\t/*this.setState({robots: robots})*/\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots: users}));\r\n\t}\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t/*const filteredRobots= this.state.robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\tconsole.log(filteredRobots);*/\r\n\t}\r\n\trender(){\r\n\t\t\tconst{robots,searchfield}=this.state;\r\n\t\t\tconst filteredRobots= robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn!robots.length?\r\n\t\t\t<h1>Loading</h1>:\r\n\t\t    (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'> AmisRobo </h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t {/*<CardList robots={this.state.robots} />*/}\r\n\t\t\t\t\t <Scroll>\r\n\t\t\t\t\t    <ErrorBoundry>\r\n\t\t\t\t\t      <CardList robots={filteredRobots} />\r\n\t\t\t\t\t    </ErrorBoundry>\r\n\t\t\t\t\t </Scroll>\r\n\t\t\t\t </div>\r\n\t\t    );\r\n\t\r\n\t}\t\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import Card from './Card';\nimport './index.css';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { robots } from './robots';\nimport App from './containers/App';\n\nReactDOM.render(\n      <App />\n  ,document.getElementById('root')\n);\nserviceWorker.unregister();\n\n/*on envoie dans la class cardList\n  \t <div>\n  \t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n  \t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n\t</div>\n\t*/"],"sourceRoot":""}